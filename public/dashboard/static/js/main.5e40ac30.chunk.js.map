{"version":3,"sources":["components/Index.js","components/Users.js","components/Profile.js","components/Page404.js","Dashboard.js","serviceWorker.js","index.js"],"names":["Index","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","_this2","axios","get","then","res","setState","data","catch","err","console","log","document","title","react_default","a","createElement","className","Component","Users","Profile","Page404","Dashboard","menuItems","slug","component","PageIndex","PageUsers","PageProfile","react_router_dom","to","type","placeholder","aria-label","map","item","index","key","data-feather","role","react_router","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_Dashboard","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e40ac30.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nclass Index extends Component {\n  constructor() {\n    super();\n    this.state = {\n      message: ''\n    };\n  }\n  componentDidMount() {\n    axios.get('/apiboard')\n      .then((res) => {\n        this.setState({ message: res.data.message });\n      })\n      .catch(function (err) {\n        console.log(err);\n      });\n  }\n  render() {\n    document.title = 'Index';\n    return (\n      <div>\n        <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 className=\"h2\">Index</h1>\n        </div>\n        Index\n        {this.state.message}\n      </div>\n    );\n  }\n}\nexport default Index;","import React, { Component } from 'react';\n\nclass Users extends Component {\n  render() {\n    document.title = 'Users';\n    return (\n      <div>\n        <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 className=\"h2\">Users</h1>\n        </div>\n        Users\n      </div>\n    );\n  }\n}\nexport default Users;","import React, { Component } from 'react';\n\nclass Profile extends Component {\n  render() {\n    document.title = 'Profile';\n    return (\n      <div>\n        <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\n          <h1 className=\"h2\">Profile</h1>\n        </div>\n        Profile\n      </div>\n    );\n  }\n}\nexport default Profile;","import React, { Component } from 'react';\n\nclass Page404 extends Component {\n  render() {\n    return (\n      <h1>404</h1>\n    );\n  }\n}\nexport default Page404;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport PageIndex from './components/Index';\nimport PageUsers from './components/Users';\nimport PageProfile from './components/Profile';\nimport Page404 from './components/Page404';\nclass Dashboard extends Component {\n  constructor() {\n    super();\n    this.menuItems = [\n      { title: 'Home', slug: '/board', component: PageIndex },\n      { title: 'Profile', slug: '/board/profile', component: PageUsers },\n      { title: 'Users', slug: '/board/users', component: PageProfile }\n    ];\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"container-fluid\">\n          <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n            <Link className=\"navbar-brand col-sm-3 col-md-2 mr-0\" to=\"/\">HOME</Link>\n            <input className=\"form-control form-control-dark w-100\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" />\n            <ul className=\"navbar-nav px-3\">\n              <li className=\"nav-item text-nowrap\">\n                <Link className=\"nav-link\" to=\"/logout\">Log out</Link>\n              </li>\n            </ul>\n          </nav>\n          <div className=\"row\">\n            <nav className=\"col-md-2 d-none d-md-block bg-light sidebar\">\n              <div className=\"sidebar-sticky\">\n                <ul className=\"nav flex-column\">\n                  {\n                    this.menuItems.map((item, index) =>\n                      <li key={index} className=\"nav-item\">\n                        <Link className=\"nav-link\" to={item.slug}>\n                          <span data-feather=\"file\"></span>\n                          {item.title}\n                        </Link>\n                      </li>\n                    )\n                  }\n                </ul>\n              </div>\n            </nav>\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\n              <Switch>\n                {\n                  this.menuItems.map((item) => <Route path={item.slug} exact component={item.component} />)\n                }\n                <Route component={Page404} />\n              </Switch>\n            </main>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\nexport default Dashboard;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dashboard from './Dashboard';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(<Dashboard />, document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}